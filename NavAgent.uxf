<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<diagram program="umlet" version="14.2">
  <zoom_level>5</zoom_level>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>190</x>
      <y>15</y>
      <w>120</w>
      <h>85</h>
    </coordinates>
    <panel_attributes>Class: HexCell
--
Public:
**_Field:_
-- int: X ,Y
-- float: D , G, F
-- bool: IsUsing
-- HexCell: Parent

**_Properties:_
-- F {return G + D;}

</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>190</x>
      <y>110</y>
      <w>120</w>
      <h>135</h>
    </coordinates>
    <panel_attributes>Single Class: PoolHexCell
--
Private:
-- const int: MaxSize
-- HexCell[]: pool
--
--
Public:
_** Field: _
-- static PoolHexCell: Instance

_** Method: _

HexCell CreateCell(int initX,int initY);

void ResetCell(HexCell cell);

void ResetAll();



</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>305</x>
      <y>85</y>
      <w>90</w>
      <h>125</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>160.0;10.0;70.0;10.0;10.0;230.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>385</x>
      <y>85</y>
      <w>105</w>
      <h>60</h>
    </coordinates>
    <panel_attributes>Method: CreateCell
--
for
   pool[i].X = initX;
   pool[i].Y = initY;
   pool[i].IsUsing = true;
   return pool[i];

</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>385</x>
      <y>155</y>
      <w>105</w>
      <h>65</h>
    </coordinates>
    <panel_attributes>Method: ResetCell
--
    cell.X = -1;
    cell.Y = -1;
    cell.Parent = null;
    cell.G = float.MaxValue / 2;
    cell.H = float.MaxValue / 2;
    cell.IsUsing = false;

</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>305</x>
      <y>155</y>
      <w>90</w>
      <h>75</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>160.0;10.0;80.0;10.0;10.0;130.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>385</x>
      <y>230</y>
      <w>105</w>
      <h>30</h>
    </coordinates>
    <panel_attributes>Method: ResetAll
--
for: i = HexCell
 	ResetCell(i);

</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>305</x>
      <y>230</y>
      <w>90</w>
      <h>15</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>160.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>180</x>
      <y>400</y>
      <w>170</w>
      <h>220</h>
    </coordinates>
    <panel_attributes>Class: AStarAlgorithm
--
Private:
_**Field:_

-- List&lt;HexCell&gt; openCell, closedCell
-- List&lt;int&gt; closedIndex;

_**Method:_

Clear();
--
Public:
_**Field:_

-- int					: MaxLevel
-- HexMap				: Map 
-- List&lt;Vector3Int&gt;	: Path

_**Mehthod:_

bool FindPath(Vector3Int start,Vector3Int end);

bool Calculate(HexCell cell,Vector3Int end, int level);

HexCell FindHexCellInClosedCell(Vector3Int pos;)

void Tracking(HexCell cell, bool ignoreTarget)



</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>510</x>
      <y>280</y>
      <w>240</w>
      <h>120</h>
    </coordinates>
    <panel_attributes>Method: FindPath
--
Clear();
HexCell startCell = PoolHexCell.Instance.CreateCell(start.x, end.y);
startCell.G = 0;
startCell.H = Distance(start, end);
openCell.Add(start);

bool result = Calculate(start, end, 0);
if (result)
{
    HexCell endCell = FindHexCellInClosedList(end);
    Tracking(endCell, false);
}
return result;</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>0</x>
      <y>475</y>
      <w>105</w>
      <h>55</h>
    </coordinates>
    <panel_attributes>Method: Clear
--
Path.Clear();
openCell.Clear();
closedCell.Clear();
closedIndex.Clear();
PoolHexCell.Instance.ResetAll();</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>100</x>
      <y>475</y>
      <w>90</w>
      <h>15</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;160.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>345</x>
      <y>280</y>
      <w>175</w>
      <h>295</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>330.0;10.0;110.0;10.0;10.0;570.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>510</x>
      <y>410</y>
      <w>240</w>
      <h>255</h>
    </coordinates>
    <panel_attributes>Method: Calculate
--
if (openCell.Count == 0 || level &gt; MaxLevel) return false;

closedCell.Add(cell);
closedIndex.Add(Map.ConvertToIndex(currentCell.X, currentCell.Y));
openCell.RemoveAt(openCell.IndexOf(currentCell));

Vector3Int currentPos = new Vector3Int(currentCell.X, currentCell.Y, 0);
if (currentPos == target) return true;

Vector3Int[] neighbours = Map.GetNeighboursRange1(currentPos);

for: i = Vector3Int in neighbours
{
  HexCell newCell = PoolHexCell.Instance.CreateCell(i.x, i.y);
  if(newCell == null) continue; // pool empty

  if(!closedIndex.Constains(Map.ConvertToIndex(i.x,y.i))
  {
  	i.G = cell.G + 1;
  	i.H = Distance(i,end);
  	i.Parent = cell;
  	continue;
  }
  	PoolHexCell.Instance.Reset(newCell);
}
HexCell nextCell = openCell.Count &gt; 0 ? openCell[0] : null;
  for: i = HexCell in openCell
    if(i.F &lt; nextCell.F) nextCell = i;
        
 return Calculate(nextVisit, target, level + 1);</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>345</x>
      <y>410</y>
      <w>175</w>
      <h>180</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>330.0;10.0;130.0;10.0;10.0;340.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>510</x>
      <y>680</y>
      <w>240</w>
      <h>35</h>
    </coordinates>
    <panel_attributes>Method: FindHexCellInClosedCell
--
for i = HexCell in closedCell
	return where (i.X == pos.x &amp;&amp; i.Y == pos.y);</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>345</x>
      <y>605</y>
      <w>175</w>
      <h>140</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>330.0;260.0;150.0;260.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>510</x>
      <y>730</y>
      <w>240</w>
      <h>70</h>
    </coordinates>
    <panel_attributes>Method: Tracking
--
if (cell == null) return;

Vector3Int node = new Vector3Int(cell.X, cell.Y, 0);
if (!ignoreTarget &amp;&amp; cell.Parent != null)
    Path.Add(node);
    
Tracking(cell.Parent, false);</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>345</x>
      <y>590</y>
      <w>175</w>
      <h>105</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>330.0;190.0;200.0;190.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>965</x>
      <y>0</y>
      <w>105</w>
      <h>55</h>
    </coordinates>
    <panel_attributes>Class: CellInfo
--
Public:
_** Field: _
--int: Id
--GameObject : GameObject





</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>965</x>
      <y>110</y>
      <w>165</w>
      <h>175</h>
    </coordinates>
    <panel_attributes>Single Class: CellInfoManager
--
Public:
_** Field: _
-- static int: Id
-- static CellInfoManager: intance
-- Dictionary&lt;Vector3Int,CellInfo&gt; dict;

_**Proterties_
ID {return Id++;}
Instance {return instance;}

_**Method:_

bool AddToDict(Vector3Int key,CellInfo value);

bool RemoveDict(Vector3Init key);

bool ContainsKey(Vector3Int key);

CellInfo GetCellInfo(Vector3Int key);







</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1225</x>
      <y>110</y>
      <w>105</w>
      <h>55</h>
    </coordinates>
    <panel_attributes>Method: AddToDict
--
if (ContainsKey(key))
    return false;
dict[key] = value;
return true;






</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1225</x>
      <y>170</y>
      <w>105</w>
      <h>55</h>
    </coordinates>
    <panel_attributes>Method: RemoveDict
--
if (ContainsKey(key))
    dict.Remove(key);
    return true;
return false;






</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1225</x>
      <y>230</y>
      <w>105</w>
      <h>25</h>
    </coordinates>
    <panel_attributes>Method: ContainsKey
--
return dict.ContainsKey(key);






</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1225</x>
      <y>265</y>
      <w>105</w>
      <h>40</h>
    </coordinates>
    <panel_attributes>Method: GetCellInfo
--
if (dict.ContainsKey(key))
   return dict[key];
return null;






</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1125</x>
      <y>110</y>
      <w>110</w>
      <h>125</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>200.0;10.0;100.0;10.0;10.0;230.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1125</x>
      <y>170</y>
      <w>110</w>
      <h>75</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>200.0;10.0;110.0;10.0;10.0;130.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1125</x>
      <y>230</y>
      <w>110</w>
      <h>35</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>200.0;10.0;140.0;10.0;10.0;50.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1125</x>
      <y>265</y>
      <w>110</w>
      <h>15</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>200.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1355</x>
      <y>685</y>
      <w>155</w>
      <h>495</h>
    </coordinates>
    <panel_attributes>[RequireComponent(typeof(LineRenderer))]
Class: NavAgent : MonoBehaviour
--
Private:
_**Field:_

-- CellInfo: info;
-- HexMap: map;
-- AStarAlgorithm: aStar;
-- List&lt;Vector3Int&gt;: path;

-- bool: isLineAnimation;
-- float: animLineCounter;
-- Gradient: colors;
-- GradientColorKey[]: graColorKeys;
-- GradientAlphaKey[]: graAlphaKeys;
-- LineReneder:	movingLineRenderer;

-- int: CurrentMoveStep, CurrentOffsetMoveStep;
-- bool: IsMoving, IsOffsetMoving;
-- Vector3Int: StartCell ,EndCell;

_**Method:_

void Awake();

void Start();

void Update();

void InitLineRender();

void RefreshLineRenderer();

void RemoveLineRendererWayPoint();

void CalculateGradientColor();

void DrawNotFoundPath();

void AnimationLine();

void MoveFollowOffset();

void AStarMoveToTarget();

void MoveFinish();

bool FindPaht(Vector3Int start, Vector3Int end);

void OnDestroy();

void Dead();
--
Public:
_**Field:_

-- int: MaxSearchLevel, MaxMoveStep;
-- float: Speed;
-- List&lt;Vector3Int&gt;	: OffsetMovement

_**Mehthod:_

void StartMove();

void StarMove(Vector3Int start, Vector3Int end);



</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1000</x>
      <y>1155</y>
      <w>290</w>
      <h>55</h>
    </coordinates>
    <panel_attributes>Method: StartMove
--
CurrentOffsetStep = 0;
IsOffsetMoving = true;
if (OffsetMovement.Count &gt; 0)
      CellInfoManager.Instance.RemoveDict(map.WorldToCell(transform.position).ZToZero());
      transform.position = map.CellToWorld(OffsetMovement[0]);
        





</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1000</x>
      <y>1220</y>
      <w>290</w>
      <h>45</h>
    </coordinates>
    <panel_attributes>Method: StartMove
--
 if (IsMoving == false)
      CellInfoManager.Instance.RemoveDict(start);
FindPath(start, end);
        





</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1285</x>
      <y>1145</y>
      <w>80</w>
      <h>25</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;30.0;80.0;30.0;140.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1285</x>
      <y>1160</y>
      <w>80</w>
      <h>75</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;130.0;80.0;130.0;140.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1605</x>
      <y>1240</y>
      <w>295</w>
      <h>55</h>
    </coordinates>
    <panel_attributes>Method: FinishMove
--
Vector3Int currentCell = map.WorldToCell(transform.position).ZToZero();
        if (!CellInfoManager.Instance.AddToDict(currentCell, info))
            if (BreathFirstSearch.Instance.GetNearestCell(currentCell, out Vector3Int result))
                FindPath(currentCell, result);
                CurrentMoveStep = 0;





</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1505</x>
      <y>1050</y>
      <w>110</w>
      <h>205</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>200.0;390.0;110.0;390.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1605</x>
      <y>1305</y>
      <w>295</w>
      <h>90</h>
    </coordinates>
    <panel_attributes>Method: FindPath
--
StartCell = start;
EndCell = end;
if (CurrentMoveStep &gt;= MaxMoveStep || (path != null &amp;&amp; path.Count == 0))
            CurrentMoveStep = 0;

IsMoving = aStar.FindPath(StartCell.ZToZero(), EndCell.ZToZero());
path = aStar.Path;
InitLineRenderer();
return IsMoving;





</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1505</x>
      <y>1065</y>
      <w>110</w>
      <h>255</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>200.0;490.0;90.0;490.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1605</x>
      <y>1105</y>
      <w>295</w>
      <h>130</h>
    </coordinates>
    <panel_attributes>Method: AStarMoveToTarget
--
if (IsMoving)
     if (path.Count &gt; 0)
        Vector3 currentTarget = map.CellToWorld(path[path.Count - 1]);
        transform.position = Vector3.MoveTowards(
        current: transform.position,
        target: currentTarget,
        maxDistanceDelta: Time.deltaTime * Speed);

            if ((transform.position - currentTarget).magnitude &lt;= 0.1f)
               path.RemoveAt(path.Count - 1);
               RemoveLineRendererWayPoint();
            else
                IsMoving = false;
                MoveFinish();



</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1505</x>
      <y>1035</y>
      <w>110</w>
      <h>85</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>200.0;150.0;100.0;150.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1605</x>
      <y>980</y>
      <w>295</w>
      <h>120</h>
    </coordinates>
    <panel_attributes>Method: MoveFollowOffset
--
 if (IsOffsetMoving)        
       if (CurrentOffsetStep &lt; OffsetMovement.Count)
           Vector3 currentTarget = map.CellToWorld(OffsetMovement[CurrentOffsetStep]);
           transform.position = Vector3.MoveTowards(
           current: transform.position,
           target: currentTarget,
           maxDistanceDelta: Time.deltaTime * Speed);

           if ((transform.position - currentTarget).magnitude &lt;= 0.1f)
              CurrentOffsetStep++;
         else
            IsOffsetMoving = false;
            MoveFinish();



</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1505</x>
      <y>980</y>
      <w>110</w>
      <h>50</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>200.0;10.0;110.0;10.0;10.0;80.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1605</x>
      <y>910</y>
      <w>295</w>
      <h>65</h>
    </coordinates>
    <panel_attributes>Method: AnimationLine
--
 if (isLineAnimation)
     animLineCounter += Time.deltaTime;
     if (animLineCounter &gt;= 0.3f)
        isLineAnimation = false;
        animLineCounter = 0.0f;
        movingLineRenderer.positionCount = 0;



</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1505</x>
      <y>910</y>
      <w>110</w>
      <h>100</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>200.0;10.0;110.0;10.0;10.0;180.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1605</x>
      <y>845</y>
      <w>295</w>
      <h>60</h>
    </coordinates>
    <panel_attributes>Method: DrawNotFoundPath
--
movingLineRenderer.positionCount = 2;
movingLineRenderer.SetPosition(0, transform.position);
movingLineRenderer.SetPosition(1, map.CellToWorld(EndCell));
CalculateGradiantColor();
isLineAnimation = true;



</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1505</x>
      <y>845</y>
      <w>110</w>
      <h>155</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>200.0;10.0;110.0;10.0;10.0;290.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1605</x>
      <y>710</y>
      <w>295</w>
      <h>130</h>
    </coordinates>
    <panel_attributes>Method: CalculateGadientColor
--
if (path.Count != 0)
  float time = (float)(path.Count - (MaxMoveStep - CurrentMoveStep)) / (float)path.Count;
  graColorKeys[0].time = time;
  graAlKeys[0].time = graColorKeys[0].time;
  if (time &lt;= 0)
    graColorKeys[0].color = Color.blue;
  else
    graColorKeys[0].color = Color.red;
else
   graColorKeys[0].time = 1.0f;
   graColorKeys[0].color = Color.red;
   graAlKeys[0].time = graColorKeys[0].time;
colors.SetKeys(graColorKeys, graAlKeys);
movingLineRenderer.colorGradient = colors;



</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1505</x>
      <y>710</y>
      <w>110</w>
      <h>275</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>200.0;10.0;80.0;10.0;10.0;530.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1000</x>
      <y>995</y>
      <w>290</w>
      <h>65</h>
    </coordinates>
    <panel_attributes>Method: RefreshLineRenderer
--
if (path != null)
  int count = path.Count;
  movingLineRenderer.positionCount = count;
  for (int i = 0; i &lt; count; i++)
     movingLineRenderer.SetPosition(count - i - 1,
                                    map.CellToWorld(path[count - i - 1]).AddY(0.2f));
        





</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1285</x>
      <y>935</y>
      <w>80</w>
      <h>80</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;140.0;80.0;140.0;140.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1000</x>
      <y>940</y>
      <w>290</w>
      <h>50</h>
    </coordinates>
    <panel_attributes>Method: InitLineRenderer
--
if (IsMoving)
   RefreshLineRenderer();
else
   DrawNotFoundPath();
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1285</x>
      <y>920</y>
      <w>80</w>
      <h>35</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;50.0;80.0;50.0;140.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1000</x>
      <y>895</y>
      <w>290</w>
      <h>40</h>
    </coordinates>
    <panel_attributes>Method: Update
--
MoveToTarget();
MoveFollowOffset();
AnimationLine();
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1285</x>
      <y>895</y>
      <w>80</w>
      <h>25</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;80.0;10.0;140.0;30.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1000</x>
      <y>780</y>
      <w>290</w>
      <h>110</h>
    </coordinates>
    <panel_attributes>Method: Start
--
map = HexMap.Instance;
info = new CellInfomation()
{
  GameObject = gameObject,
  Id = CellInfoManager.ID(),
};
aStar = new AStartAlgorithm()
{
  HexMap = map,
  MaxLevel = MaxSearchLevel,
};
MoveFinish();
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1285</x>
      <y>780</y>
      <w>80</w>
      <h>125</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;70.0;10.0;140.0;230.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1285</x>
      <y>660</y>
      <w>80</w>
      <h>225</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;80.0;10.0;140.0;430.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1000</x>
      <y>610</y>
      <w>290</w>
      <h>160</h>
    </coordinates>
    <panel_attributes>Method: Awake
--
movingLineRenderer = GetComponent&lt;LineRenderer&gt;();
movingLineRenderer.allowOcclusionWhenDynamic = true;
graAlKeys = new GradientAlphaKey[2];
graColorKeys = new GradientColorKey[2];
graColorKeys[0].color = Color.red;
graColorKeys[0].time = 0.0f;
graColorKeys[1].color = Color.blue;
graColorKeys[1].time = 1.0f;
graAlKeys[0].alpha = 100.0f;
graAlKeys[0].time = 0.0f;
graAlKeys[1].alpha = 100.0f;
graAlKeys[1].time = 1.0f;
colors = new Gradient()
{
  mode = GradientMode.Fixed,
  alphaKeys = graAlKeys,
  colorKeys = graColorKeys
};
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1430</x>
      <y>30</y>
      <w>195</w>
      <h>220</h>
    </coordinates>
    <panel_attributes>Single Class: HexMap
--
Private:
_**Field:_
readonly Vector3Int[]: HexaPatternEven1, HexaPatternOdd1;

--
Public:
_** Field: _
-- int: TotalRow, TotalCol
-- Grid: HexGrid;

_**Proterties_
static HexMap Instance {get; private set;}

_**Method:_

int ConvertToIndex(int x,int y);

bool IsValidCell(int x,int y);

Vector3 CellToWorld(Vector3Int cell);

Vector3Int WorldToCell(Vector3 pos);

Vector3Int ConvertToVector3Int(int index);

Vector3Int[] GetNeighnours(Vector3Int cell);




</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1690</x>
      <y>40</y>
      <w>190</w>
      <h>25</h>
    </coordinates>
    <panel_attributes>Method: ConvertToIndex
--
return y * TotalCol + x;






</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1690</x>
      <y>70</y>
      <w>190</w>
      <h>30</h>
    </coordinates>
    <panel_attributes>Method: IsValidCell
--
return x &gt;= 5 &amp;&amp; x &lt;= TotalCol - 5
&amp;&amp; y &gt;= 5 &amp;&amp; y &lt;= TotalRow - 5;






</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1690</x>
      <y>105</y>
      <w>190</w>
      <h>25</h>
    </coordinates>
    <panel_attributes>Method: CellToWorld
--
return HexGrid.CellToWorld(cell);






</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1690</x>
      <y>135</y>
      <w>190</w>
      <h>25</h>
    </coordinates>
    <panel_attributes>Method: WorldToCell
--
return HexGrid.WorldToCell(pos);






</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1690</x>
      <y>165</y>
      <w>190</w>
      <h>65</h>
    </coordinates>
    <panel_attributes>Method: ConvertToVector3Int
--
Vector3Int result = Vector3Int.zero;
result.x = index % TotalCol;
result.y = index / TotalCol;
if (IsValidCell(result.x, result.y)) 
  return Vector3Int.one * -1;        
return result;






</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1690</x>
      <y>235</y>
      <w>190</w>
      <h>90</h>
    </coordinates>
    <panel_attributes>Method: GetNeighbours
--
List&lt;Vector3Int&gt; neighbours = new List&lt;Vector3Int&gt;();
Vector3Int neighbour;
Vector3Int[] pattern = (cell.y % 2 == 0) ? HexaPatternEven1 
                                                               : HexaPatternOdd1;
for (int i = 0; i &lt; pattern.Length; i++)
      neighbour = pattern[i] + cell;
        if (IsValidCell(neighbour.x, neighbour.y))
           neighbours.Add(neighbour);
return neighbours.ToArray();






</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1620</x>
      <y>235</y>
      <w>80</w>
      <h>15</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>140.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1620</x>
      <y>165</y>
      <w>80</w>
      <h>70</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>140.0;10.0;50.0;10.0;10.0;120.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1620</x>
      <y>135</y>
      <w>80</w>
      <h>80</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>140.0;10.0;50.0;10.0;10.0;140.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1620</x>
      <y>105</y>
      <w>80</w>
      <h>90</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>140.0;10.0;60.0;10.0;10.0;160.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1620</x>
      <y>70</y>
      <w>80</w>
      <h>110</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>140.0;10.0;60.0;10.0;10.0;200.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1620</x>
      <y>40</y>
      <w>80</w>
      <h>125</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>140.0;10.0;60.0;10.0;10.0;230.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1000</x>
      <y>1095</y>
      <w>290</w>
      <h>35</h>
    </coordinates>
    <panel_attributes>Method: Dead
--
if(!IsMoving)
   CellInfoManager.Instance.RemoveDict(map.WorldToCell(transform.position).ZToZero());





</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1000</x>
      <y>1065</y>
      <w>290</w>
      <h>25</h>
    </coordinates>
    <panel_attributes>Method: OnDestroy
--
Dead();


</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1285</x>
      <y>1065</y>
      <w>80</w>
      <h>30</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;90.0;10.0;140.0;40.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1285</x>
      <y>1095</y>
      <w>80</w>
      <h>15</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;140.0;10.0</additional_attributes>
  </element>
</diagram>
